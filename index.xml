<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lexy: C++ parser combinator library</title><link>https://lexy.foonathan.net/</link><description>Recent content on lexy: C++ parser combinator library</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2020-2021</copyright><atom:link href="https://lexy.foonathan.net/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lexy.foonathan.net/benchmark_json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lexy.foonathan.net/benchmark_json/</guid><description>This benchmark measures the time it takes to validate JSON, i.e. to check whether it is well-formed. Validation was chosen as opposed to parsing, as parsing speed depends on the JSON data structure as well. Implementing an efficient JSON container is out of scope for lexy, so it would have a disadvantage over the specialized JSON libraries.
The average validation times for each input are shown in the boxplots below.</description></item><item><title>Reference - lexy</title><link>https://lexy.foonathan.net/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lexy.foonathan.net/reference/</guid><description>This is the reference documentation for lexy.
If anything in the documentation could be improved (and there is probably a lot), please raise an issue or — even better — create a PR. Thank you!
Inputs and Encodings An Input defines the input that will be parsed by lexy. It has a corresponding Encoding that controls, among other things, its character type and whether certain rules are available.</description></item><item><title>Tutorial - lexy</title><link>https://lexy.foonathan.net/tutorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lexy.foonathan.net/tutorial/</guid><description>This tutorial introduces you to the basics of lexy. Our goal is to parse some simple configuration file of a software package.
A sample input file can look like this:
package.config name = lexy version = 0.0.0 authors = [&amp;#34;Jonathan Müller&amp;#34;] And we want to parse it into the following C++ data structure using lexy:
PackageConfig struct PackageVersion { int major; int minor; int patch; }; struct PackageConfig { std::string name; PackageVersion version; std::vector&amp;lt;std::string&amp;gt; authors; }; The final source code can be found at examples/tutorial.</description></item></channel></rss>