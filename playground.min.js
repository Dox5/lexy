const api="https://godbolt.org/api/",compiler_id="clang_trunk",lexy_id={id:'lexy',version:'trunk'};export function list_of_productions(c){var a=[],b;const d=/(struct|class) ([a-zA-Z0-9_]+)/g;for(b=void 0;b=d.exec(c);)a.push(b[2]);return a}export async function preprocess_source(c,a,b){if(c=='playground'){const c=await(await fetch('https://lexy.foonathan.net/cpp/playground_headers.single.hpp')).text(),d=`#define LEXY_PLAYGROUND_PRODUCTION ${b}`,e=await(await fetch('https://lexy.foonathan.net/cpp/playground_prefix.cpp')).text(),f=await(await fetch('https://lexy.foonathan.net/cpp/playground_main.cpp')).text();return c+'\n'+d+'\n'+e+'\n'+a+'\n'+f}const macros=`#define LEXY_PLAYGROUND_PRODUCTION ${b}`,prefix=await(await fetch('https://lexy.foonathan.net/cpp/godbolt_prefix.cpp')).text(),main=await(await fetch('https://lexy.foonathan.net/cpp/godbolt_main.cpp')).text();return macros+'\n'+prefix+'\n'+a+'\n'+main}export async function compile_and_run(c,d){var a={},f,g,h;a.source=c,a.options={},a.options.userArguments="-fno-color-diagnostics -std=c++20",a.options.executeParameters={args:[],stdin:d},a.options.compilerOptions={executorRequest:!0},a.options.filters={execute:!0},a.options.tools=[],a.options.libraries=[lexy_id],a.lang="c++";const e=await fetch(api+"compiler/"+compiler_id+"/compile",{method:"POST",headers:{'Content-Type':'application/json',Accept:'application/json'},body:JSON.stringify(a)}),b=await e.json();return b.didExecute?(f=b.stdout.map(a=>a.text).join("\n"),g=b.stderr.map(a=>a.text).join("\n"),{success:!0,stdout:f,stderr:g,code:b.code}):(h=b.buildResult.stderr.map(a=>a.text).join("\n"),{success:!1,message:h})}export async function get_godbolt_url(c,d){var a={},b;a.id=1,a.language="c++",a.source=c,a.compilers=[],b={},b.id=compiler_id,b.libs=[lexy_id],b.options="-std=c++20",a.executors=[{compiler:b,stdin:d}];const e=await fetch(api+"shortener",{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({sessions:[a]})});return(await e.json()).url}export async function load_godbolt_url(d){const e=await fetch(api+"shortlinkinfo/"+d),f=await e.json(),c=f.sessions[0],b=c.source,g=c.executors[0].stdin,h=/#define LEXY_PLAYGROUND_PRODUCTION ([a-zA-Z_0-9]+)/,i=h.exec(b)[1],j=/\/\/=== grammar ===\/\/([^]*)\/\/=== main function ===\/\//;let a=j.exec(b)[1];return a=a.trim(),{grammar:a,input:g,production:i}}